View(files.name)
is.vector(files.name)
as.vector(files.name)
debugSource('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
is.list(files.name)
source('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
head(dirs.name)
debugSource('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
View(dirs.and.files.name)
dirs.and.files.name <- data.frame(strsplit(files.paths.no.suffix.name,"/"))
files.paths.no.suffix.name <- sub(".jpg","",files.path,fixed = TRUE)
View(dirs.and.files.name)
is.vector(files.paths.no.suffix.name)
debugSource('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
#files.paths.no.suffix.name <- sub(".jpg","",files.path,fixed = TRUE)
ls()
rm(ls())
rm(list = ls())
source('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
source('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
file.store <- file(paste(BASE.PATH,dir,sep =""))
file.store <- file(paste(BASE.PATH,dir,sep =""),"w")
source('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
write.table(files.no.suffix.name,file=paste(spec.dir.path,"_ids",sep=""),
source('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
rm(ls());
debugSource('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
View(ad)
debugSource('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
View(ad)
sub
debugSource('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
View(ads)
View(ad)
is.vector(creativeIDs)
head(creativeIDs)
a <- 1:5
a
a[a>4]<-3
a
a[a>2]<-3
a
b <-3:6
a
b[b in a] <- 8
b[b %in% a] <- 8
b
b[!b %in% a] <- 9
b
mode(b)
rm(ls());
rm(listls());
rm(list=ls());
debugSource('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
print(new.col)
debugSource('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
source('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
print(dirs)
View(ads)
a <- 1:3
b <-7:9
c(a b)
c(a ,b)
View(ads)
source('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
View(ads)
ads <- cbind(ads,new.col)
View(ads)
View(ads)
rm(list=ls())
debugSource('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
View(ads)
View(ads)
source('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
source('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
source('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
source('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
source('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/statAndPlot.R', echo=TRUE)
View(train)
debugSource('~/workspace/BigDataCompetition/statAndPlot.R', echo=TRUE)
View(train)
debugSource('~/workspace/BigDataCompetition/statAndPlot.R', echo=TRUE)
View(user)
source('~/workspace/BigDataCompetition/statAndPlot.R', echo=TRUE)
regist[x == "\N"]
regist[x == "\\N"]
regist[regist== "\\N"]
regist== "\\N"
source('~/workspace/BigDataCompetition/statAndPlot.R', echo=TRUE)
regist
is.factor(regist)
is.vector(regist)
debugSource('~/workspace/BigDataCompetition/statAndPlot.R', echo=TRUE)
regist
as.numeric(regist)
source('~/workspace/BigDataCompetition/statAndPlot.R', echo=TRUE)
source('~/workspace/BigDataCompetition/statAndPlot.R', echo=TRUE)
source('~/workspace/BigDataCompetition/statAndPlot.R', echo=TRUE)
View(user)
source('~/workspace/BigDataCompetition/resetUnknownValueTo0.R', echo=TRUE)
View(user)
as.vector(user)
source('~/workspace/BigDataCompetition/resetUnknownValueTo0.R', echo=TRUE)
View(user)
source('~/workspace/BigDataCompetition/resetUnknownValueTo0.R', echo=TRUE)
View(user)
source('~/workspace/BigDataCompetition/nerualNet.R', echo=TRUE)
source('~/workspace/BigDataCompetition/nerualNet.R', echo=TRUE)
source('~/workspace/BigDataCompetition/nerualNet.R', echo=TRUE)
source('~/workspace/BigDataCompetition/nerualNet.R', echo=TRUE)
a <- nnet(fmla,train.feature,size=9,rang=0.03,decay=5e-4,maxit=100)
time
time()
date()
d1 <-date()
d2 <-date()
d2-d1
d1 <-Sys.time()
d1
d2 <-Sys.time()
d2-d1
data.frame(end.time-start.time)
source('~/workspace/BigDataCompetition/nerualNet.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/nerualNet.R', echo=TRUE)
length(train.feature)
nrow(train.feature)
debugSource('~/workspace/BigDataCompetition/nerualNet.R', echo=TRUE)
samp
source('~/workspace/BigDataCompetition/nerualNet.R', echo=TRUE)
source('~/workspace/BigDataCompetition/nerualNet.R', echo=TRUE)
samp
sort
sort(samp)
source('~/workspace/BigDataCompetition/nerualNet.R', echo=TRUE)
source('~/workspace/BigDataCompetition/nerualNet.R', echo=TRUE)
source('~/workspace/BigDataCompetition/nerualNet.R', echo=TRUE)
source('~/workspace/BigDataCompetition/nerualNet.R', echo=TRUE)
source('~/workspace/BigDataCompetition/nerualNet.R', echo=TRUE)
install.packages("e1071")
data(iris)
attach(iris)
## classification mode
# default with factor response:
model <- svm(Species ~ ., data = iris)
# alternatively the traditional interface:
x <- subset(iris, select = -Species)
y <- Species
model <- svm(x, y)
print(model)
summary(model)
# test with train data
pred <- predict(model, x)
# (same as:)
pred <- fitted(model)
# Check accuracy:
table(pred, y)
debugSource('~/workspace/BigDataCompetition/svm.R', echo=TRUE)
data(iris)
attach(iris)
## classification mode
# default with factor response:
model <- svm(Species ~ ., data = iris)
# alternatively the traditional interface:
x <- subset(iris, select = -Species)
y <- Species
model <- svm(x, y)
print(model)
summary(model)
# test with train data
pred <- predict(model, x)
# (same as:)
pred <- fitted(model)
# Check accuracy:
table(pred, y)
debugSource('~/workspace/BigDataCompetition/svm.R', echo=TRUE)
source('~/workspace/BigDataCompetition/svm.R', echo=TRUE)
source('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
View(train)
source('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
View(simp.train)
source('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
View(simp.train)
a<-1:5
lapply(a,sum)
lapply(a,sqrt)
b<-lapply(a,sqrt)
b<-unlist(lapply(a,sqrt))
source('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
View(simp.train)
source('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
View(simp.train)
require(plyr)
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
)
View(dfx)
ddply(dfx, .(group, sex), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
source('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
View(simp.train)
View(simp.train)
dfx[,4]<-1
View(dfx)
colnames(dfx)[4]<-"tmp"
View(dfx)
dfx <- ddply(train,.(group,sex),summarize,
imps=sum(age),clks=sum(tmp),useAdRate=imps/clks)
dfx <- ddply(dfx,.(group,sex),summarize,
imps=sum(age),clks=sum(tmp),useAdRate=imps/clks)
View(dfx)
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
)
ddply(dfx, .(group), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
source('~/workspace/BigDataCompetition/calcClkRate.R', echo=TRUE)
source('~/workspace/BigDataCompetition/calcClkRate.R', echo=TRUE)
View(train.ad)
View(train.user)
View(train.user)
source('~/workspace/BigDataCompetition/calcClkRate.R', echo=TRUE)
data.frame()
data.frame(row.names=train.col.names)
debugSource('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
data.frame(row.names=train.col.names)
data.frame(col.names=train.col.names)
d <- data.frame()
d[2,3]<-0
source('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
x <- pos.sample[,-REMOVE.FEATRUE.INDEX]
debugSource('~/workspace/BigDataCompetition/neuralNet.R', echo=TRUE)
x <-pos.sample[,-REMOVE.FEATRUE.INDEX]
a <-1:5
b<-2:6
a*b
a
b
a %*% b
rep
rep(0,10)
rep("0",10)
debugSource('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
n
n
n
n
debugSource('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
View(test.result.df)
debugSource('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
View(test.mean.df)
sorted.result.df <- test.mean.df[order(test.mean.df[,2])]
sorted.result.df <- test.mean.df[order(test.mean.df[,2]),]
View(sorted.result.df)
write.table(result.data.frame,paste(BASE.PATH,"sortedTTestResultFor2Features",sep=""),
sep="\t",quote = FALSE,row.names=FALSE,col.names=FALSE)
write.table(sorted.result.df,paste(BASE.PATH,"sortedTTestResultFor2Features",sep=""),
sep="\t",quote = FALSE,row.names=FALSE,col.names=FALSE)
debugSource('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
a <-1:1
a
source('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
source('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
source('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
source('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
m
source('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
source('~/workspace/BigDataCompetition/tTest.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/neuralNet.R', echo=TRUE)
all.features.col
fmla
debugSource('~/workspace/BigDataCompetition/neuralNet.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/neuralNet.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/neuralNet.R', echo=TRUE)
all.features.col
debugSource('~/workspace/BigDataCompetition/neuralNet.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/neuralNet.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/neuralNet.R', echo=TRUE)
source('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
install.packages("randomForest")
source('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/featureSelect.R', echo=TRUE)
train.feature[,CLASS.INDEX]
data.filter$optVariables
data.filter
source('~/workspace/BigDataCompetition/featureSelect.R', echo=TRUE)
data.filter$optVariables
optVariables
data.filter$optVariables
is.vector(data.filter$optVariables)
as.data.frame(data.filter$optVariables)
write.table(as.data.frame(data.filter$optVariables),p,paste(BASE.PATH,"optVariables",sep=""),sep="\t",
quote = FALSE,row.names = FALSE,col.names=FALSE)
a <-1:3
b<c(a)
b<-c(a)
b
debugSource('~/workspace/BigDataCompetition/logistReg.R', echo=TRUE)
glm.sol$coefficients
write.table(glm.sol$coefficients,paste(BASE.PATH,"coefficients",sep=""),sep="\t",
quote = FALSE,row.names = FALSE,col.names=FALSE)
print(i)
source('~/workspace/BigDataCompetition/coLinearTest.R', echo=TRUE)
print(ex1(0.1,8,10))
print(ex1(0.1,8,10))
source('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
e
source('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
D(E_fun,"u")
D(E_fun,"u")(0,0)
source('~/.active-rstudio-document', echo=TRUE)
ex3 <- expression(u, v, 1+ 0:9)
mode(ex3 [3])
ex3[[3]]
debugSource('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
eval(D(E_fun,"v")
debugSource('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
D(E_fun,"v")
debugSource('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
eval(E)
u
eval(E(u,v))
eval(E_fun)
debugSource('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
View(X)
debugSource('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
View(X)
View(X)
X[1:100,] <- sign(X[1:100,])*X[1:100,]
View(X)
debugSource('~/workspace/BigDataCompetition/tmp.R', echo=TRUE)
sign(X[1:samp.num,])
X[1:samp.num,]
sign(X[1:samp.num,])*X[1:samp.num,]
-X[1:samp.num,]
source('~/.active-rstudio-document', echo=TRUE)
source('~/workspace/BigDataCompetition/cutFile.R', echo=TRUE)
source('~/workspace/BigDataCompetition/cutFile.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/cutFile.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/cutFile.R', echo=TRUE)
View(test.female)
source('~/workspace/BigDataCompetition/cutFile.R', echo=TRUE)
rm(test.female)
source('~/workspace/BigDataCompetition/cutFile.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/cutFile.R', echo=TRUE)
View(test.male.comm)
View(test.male)
View(test.male)
tm <- test.male[,2]
intersect(tm,male.comm)
test.male[USER.INDEX] %in% male.comm
test.male[which(test.male[USER.INDEX] %in% male.comm),]
which(test.male[,USER.INDEX] %in% male.comm)
test.male[which(test.male[,USER.INDEX] %in% male.comm),]
debugSource('~/workspace/BigDataCompetition/cutFile.R', echo=TRUE)
View(test.male.comm)
View(test.male)
a <- 1:10
which(a>4)
a<-2:10
which(a>4)
debugSource('~/workspace/BigDataCompetition/neuralNet.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/neuralNet.R', echo=TRUE)
View(train.feature)
fma
fmla
a <-1:10
a[-11]
train.male.comm <- read.table(paste(BASE.PATH,"testFemaleCommPredictTest",sep=""),sep=",")
source('~/workspace/BigDataCompetition/calcClkRate.R', echo=TRUE)
source('~/workspace/BigDataCompetition/calcClkRate.R', echo=TRUE)
View(train.ad)
baseball
source('~/workspace/BigDataCompetition/calcClkRate.R', echo=TRUE)
View(train.ad)
x <- apply(train.user,1,rate.smooth,.(imp,clk))
x <- rate.smooth(train.user[,2],train.user[,3])
View(train.user)
rate.smooth(1,1)
rate.smooth(1,0)
source('~/workspace/BigDataCompetition/calcClkRate.R', echo=TRUE)
View(train.user)
source('~/workspace/BigDataCompetition/calcClkRate.R', echo=TRUE)
source('~/workspace/BigDataCompetition/calcClkRate.R', echo=TRUE)
source('~/workspace/BigDataCompetition/calcClkRate.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/mergeTrain.R', echo=TRUE)
View(train)
count(train)
source('~/workspace/BigDataCompetition/mergeTrain.R', echo=TRUE)
View(new.train)
source('~/workspace/BigDataCompetition/mergeTrain.R', echo=TRUE)
source('~/workspace/BigDataCompetition/mergeTrain.R', echo=TRUE)
source('~/workspace/BigDataCompetition/mergeTrain.R', echo=TRUE)
source('~/workspace/BigDataCompetition/mergeTrain.R', echo=TRUE)
source('~/workspace/BigDataCompetition/mergeTrain.R', echo=TRUE)
View(new.train)
source('~/workspace/BigDataCompetition/mergeTrain.R', echo=TRUE)
View(new.train)
View(train)
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
)
View(dfx)
ddply(dfx, .(group, sex), summarize,
num=length(age))
ddply(dfx, .(group, sex,age), summarize,
num=length(age))
dfx[1,3] <-48.43402
ddply(dfx, .(group, sex,age), summarize,
num=length(age))
View(dfx)
dfx[1,3]
dfx[1,3] <-23.90161
View(dfx)
ddply(dfx, .(group, sex,age), summarize,
num=length(age))
ddply(dfx, .(group, sex), summarize,
num=length(age))
dfx[,4]<-dfx[,3]
View(dfx)
ddply(dfx, .(group, sex,age), summarize,
num=length(V4))
dfx[,4]<-1
View(dfx)
ddply(dfx, .(group, sex,age), summarize,
num=length(V4))
dfx[,4]<-"1"
View(dfx)
ddply(dfx, .(group, sex,age), summarize,
num=length(V4))
dfx[,4] <- as.factor(dfx[,4])
ddply(dfx, .(group, sex,age), summarize,
num=length(V4))
ddply(dfx, .(group, sex,V4), summarize,
num=length(age))
ddply(dfx, .(group, sex,V4), summarize,
num=length
)
ddply(dfx, .(group, sex,V4), summarize,
num=length())
ddply(dfx, .(group, sex,V4), summarize,
num=length(V4))
dfx[3,4]<-0
View(new.train)
View(dfx)
rep(c(1,1,0,1),2)
rep(c(1,1,0,1),length.out=29)
dfx[,4]<-rep(c(1,1,0,1),length.out=29)
View(dfx)
ddply(dfx, .(group, sex,V4), summarize,
num=length(V4))
View(new.train)
source('~/workspace/BigDataCompetition/mergeTrain.R', echo=TRUE)
View(train)
source('~/workspace/BigDataCompetition/neuralNet.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/neuralNet.R', echo=TRUE)
source('~/workspace/BigDataCompetition/calcAUC.R', echo=TRUE)
source('~/workspace/BigDataCompetition/calcAUC.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/calcAUC.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/calcAUC.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/calcAUC.R', echo=TRUE)
debugSource('~/workspace/BigDataCompetition/calcAUC.R', echo=TRUE)
View(train.female.comm)
debugSource('~/workspace/BigDataCompetition/calcAUC.R', echo=TRUE)
View(merge.result)
View(merge.result)
tail
tail(merge.result)
tail(test.class.index)
debugSource('~/workspace/BigDataCompetition/calcAUC.R', echo=TRUE)
#             quote = FALSE,row.names = FALSE,col.names=FALSE)
test.class.index <- read.table(paste(BASE.PATH,"TestingClassIndex",sep=""))
m=prediction(merge.result[,2],test.class.index[merge.result[,1],])
source('~/workspace/BigDataCompetition/calcAUC.R', echo=TRUE)
source('~/workspace/BigDataCompetition/calcAUC.R', echo=TRUE)
source('~/workspace/BigDataCompetition/readAndWriteFileNamesIntoFiles.R', echo=TRUE)
View(ads)
install.packages("foreach")
install.packages("doParallel")
install.packages("randomForest")
debugSource('~/workspace/BigDataCompetition/rf.R', echo=TRUE)
s <- 1:10
for(i in s)
{}
for(i in s)
()()()}
for(i in s){}
